import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { FileTextIcon, DownloadIcon } from 'lucide-react';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import { useAuth } from '@/lib/auth-context';

interface PDFGeneratorProps {
  contentId: string;
  title: string;
  fileName?: string;
}

export function PDFGenerator({ contentId, title, fileName = 'document' }: PDFGeneratorProps) {
  const [isLoading, setIsLoading] = useState(false);
  const { user, institution } = useAuth();

  const generatePDF = async () => {
    setIsLoading(true);
    
    try {
      const contentElement = document.getElementById(contentId);
      if (!contentElement) {
        console.error(`Element with ID ${contentId} not found`);
        setIsLoading(false);
        return;
      }

      // Create a new PDF document
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      
      // Add letterhead
      // School logo
      const logoImg = document.createElement('img');
      logoImg.src = '/assets/images/psc-tech-logo.png';
      await new Promise((resolve) => {
        logoImg.onload = resolve;
      });
      
      // Draw header with logo
      pdf.setFillColor(245, 245, 245);
      pdf.rect(0, 0, pageWidth, 30, 'F');
      
      // Add logo if available
      try {
        const logoCanvas = document.createElement('canvas');
        const logoCtx = logoCanvas.getContext('2d');
        logoCanvas.width = logoImg.width;
        logoCanvas.height = logoImg.height;
        if (logoCtx) {
          logoCtx.drawImage(logoImg, 0, 0);
          const logoData = logoCanvas.toDataURL('image/png');
          pdf.addImage(logoData, 'PNG', 10, 5, 20, 20);
        }
      } catch (e) {
        console.error('Error adding logo:', e);
      }
      
      // Add school name and document title
      pdf.setFont('helvetica', 'bold');
      pdf.setTextColor(50, 50, 50);
      pdf.setFontSize(16);
      const schoolName = institution?.name || 'School Management System';
      pdf.text(schoolName, 40, 15);
      
      pdf.setFontSize(12);
      pdf.text(title, 40, 22);
      
      // Add date and user info
      pdf.setFont('helvetica', 'normal');
      pdf.setFontSize(10);
      const today = new Date().toLocaleDateString();
      pdf.text(`Generated: ${today}`, pageWidth - 60, 15);
      pdf.text(`Generated by: ${user?.fullName || 'User'}`, pageWidth - 60, 22);
      
      // Add main content
      const canvas = await html2canvas(contentElement, {
        scale: 2,
        useCORS: true,
        logging: false,
        backgroundColor: '#ffffff'
      });
      
      const contentDataUrl = canvas.toDataURL('image/png');
      
      // Calculate aspect ratio to fit content within PDF width
      const contentWidth = pageWidth - 20; // 10mm margin on each side
      const contentAspectRatio = canvas.height / canvas.width;
      const contentHeight = contentWidth * contentAspectRatio;
      
      // Add the content image to the PDF
      pdf.addImage(contentDataUrl, 'PNG', 10, 40, contentWidth, contentHeight);
      
      // Add footer with page number
      const footerY = pageHeight - 10;
      pdf.setFontSize(8);
      pdf.setTextColor(100, 100, 100);
      pdf.text(`Page 1 of 1`, pageWidth / 2, footerY, { align: 'center' });
      
      // Add signature section
      const signatureY = footerY - 30;
      pdf.line(20, signatureY, 80, signatureY); // Principal signature line
      pdf.line(pageWidth - 80, signatureY, pageWidth - 20, signatureY); // Teacher signature line
      
      pdf.setFontSize(10);
      pdf.text('Principal Signature', 20, signatureY + 5);
      pdf.text('Teacher Signature', pageWidth - 80, signatureY + 5);
      
      // Add signatures if available
      try {
        const principalSigImg = document.createElement('img');
        principalSigImg.src = '/images/principalsignature.jpg';
        await new Promise((resolve) => {
          principalSigImg.onload = resolve;
          principalSigImg.onerror = resolve;
        });
        
        if (principalSigImg.complete && principalSigImg.naturalWidth !== 0) {
          const sigCanvas = document.createElement('canvas');
          const sigCtx = sigCanvas.getContext('2d');
          sigCanvas.width = principalSigImg.width;
          sigCanvas.height = principalSigImg.height;
          if (sigCtx) {
            sigCtx.drawImage(principalSigImg, 0, 0);
            const sigData = sigCanvas.toDataURL('image/png');
            pdf.addImage(sigData, 'PNG', 30, signatureY - 15, 40, 15);
          }
        }
        
        const teacherSigImg = document.createElement('img');
        teacherSigImg.src = '/images/teachersignature.jpg';
        await new Promise((resolve) => {
          teacherSigImg.onload = resolve;
          teacherSigImg.onerror = resolve;
        });
        
        if (teacherSigImg.complete && teacherSigImg.naturalWidth !== 0) {
          const sigCanvas = document.createElement('canvas');
          const sigCtx = sigCanvas.getContext('2d');
          sigCanvas.width = teacherSigImg.width;
          sigCanvas.height = teacherSigImg.height;
          if (sigCtx) {
            sigCtx.drawImage(teacherSigImg, 0, 0);
            const sigData = sigCanvas.toDataURL('image/png');
            pdf.addImage(sigData, 'PNG', pageWidth - 70, signatureY - 15, 40, 15);
          }
        }
      } catch (e) {
        console.error('Error adding signatures:', e);
      }
      
      // Save the PDF
      pdf.save(`${fileName}.pdf`);
    } catch (error) {
      console.error('Error generating PDF:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Button variant="outline" onClick={generatePDF} disabled={isLoading}>
      {isLoading ? (
        <span className="flex items-center">
          <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-primary" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Generating...
        </span>
      ) : (
        <>
          <FileTextIcon className="mr-2 h-4 w-4" />
          <span className="flex items-center">
            Export PDF
            <DownloadIcon className="ml-1 h-3 w-3" />
          </span>
        </>
      )}
    </Button>
  );
}