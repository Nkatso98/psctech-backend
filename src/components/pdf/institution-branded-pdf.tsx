import React from 'react';
import { jsPDF } from 'jspdf';

// Generic Institution Branded PDF Component
export function InstitutionBrandedPDF({
  title,
  content,
  institution,
  fileName = 'document.pdf'
}: {
  title: string;
  content: string;
  institution?: {
    name: string;
    logo?: string;
    address?: string;
    phone?: string;
    email?: string;
  };
  fileName?: string;
}) {
  const doc = new jsPDF();
  
  // Add institution logo if available
  if (institution?.logo) {
    try {
      // In a real app, you would load the actual logo image
      // For now, we'll add a placeholder
      doc.setFontSize(20);
      doc.text(institution.name || 'School Name', 20, 30);
    } catch (error) {
      console.warn('Could not load institution logo:', error);
    }
  }

  // Add title
  doc.setFontSize(24);
  doc.setFont('helvetica', 'bold');
  doc.text(title, 20, 50);

  // Add institution header
  if (institution) {
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text(institution.name, 20, 70);
    
    if (institution.address) {
      doc.text(institution.address, 20, 80);
    }
    
    if (institution.phone) {
      doc.text(`Phone: ${institution.phone}`, 20, 90);
    }
    
    if (institution.email) {
      doc.text(`Email: ${institution.email}`, 20, 100);
    }
  }

  // Add content
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  
  // Split content into lines that fit the page width
  const splitText = doc.splitTextToSize(content, 170);
  let yPosition = 120;
  
  for (let i = 0; i < splitText.length; i++) {
    if (yPosition > 280) {
      doc.addPage();
      yPosition = 20;
    }
    doc.text(splitText[i], 20, yPosition);
    yPosition += 7;
  }

  // Add footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(10);
    doc.text(`Page ${i} of ${pageCount}`, 20, 290);
    doc.text(`Generated by PSC Tech`, 170, 290);
  }

  // Save the PDF
  doc.save(fileName);
  
  return doc;
}

// Specialized Homework PDF Component
export function InstitutionBrandedHomeworkPDF({
  homeworkData
}: {
  homeworkData: {
    title: string;
    subject: string;
    grade: string;
    description: string;
    dueDate: string;
    instructions: string;
    institution: {
      name: string;
      logo?: string;
      address?: string;
      phone?: string;
      email?: string;
    };
  };
}) {
  const title = `Homework Assignment - ${homeworkData.subject}`;
  const content = `
Title: ${homeworkData.title}
Subject: ${homeworkData.subject}
Grade: ${homeworkData.grade}
Due Date: ${homeworkData.dueDate}

Description:
${homeworkData.description}

Instructions:
${homeworkData.instructions}

Please complete this assignment and submit it by the due date.
  `.trim();

  return InstitutionBrandedPDF({
    title,
    content,
    institution: homeworkData.institution,
    fileName: `homework_${homeworkData.subject.toLowerCase()}_${homeworkData.grade.toLowerCase()}.pdf`
  });
}

// Specialized Test PDF Component
export function InstitutionBrandedTestPDF({
  testData
}: {
  testData: {
    title: string;
    subject: string;
    grade: string;
    instructions: string;
    questions: Array<{
      question: string;
      type: 'multiple-choice' | 'essay' | 'short-answer';
      options?: string[];
    }>;
    institution: {
      name: string;
      logo?: string;
      address?: string;
      phone?: string;
      email?: string;
    };
  };
}) {
  const title = `Test - ${testData.subject}`;
  const content = `
Title: ${testData.title}
Subject: ${testData.subject}
Grade: ${testData.grade}

Instructions:
${testData.instructions}

Questions:

${testData.questions.map((q, index) => {
  let questionText = `${index + 1}. ${q.question}\n`;
  if (q.type === 'multiple-choice' && q.options) {
    questionText += q.options.map((opt, optIndex) => 
      `   ${String.fromCharCode(65 + optIndex)}. ${opt}`
    ).join('\n');
  }
  return questionText;
}).join('\n\n')}

Good luck!
  `.trim();

  return InstitutionBrandedPDF({
    title,
    content,
    institution: testData.institution,
    fileName: `test_${testData.subject.toLowerCase()}_${testData.grade.toLowerCase()}.pdf`
  });
}

// Specialized Report PDF Component
export function InstitutionBrandedReportPDF({
  reportData
}: {
  reportData: {
    title: string;
    studentName: string;
    grade: string;
    term: string;
    year: string;
    subjects: Array<{
      name: string;
      mark: number;
      comment: string;
    }>;
    overallPerformance: string;
    institution: {
      name: string;
      logo?: string;
      address?: string;
      phone?: string;
      email?: string;
    };
  };
}) {
  const title = `Academic Report - ${reportData.studentName}`;
  const content = `
Title: ${reportData.title}
Student: ${reportData.studentName}
Grade: ${reportData.grade}
Term: ${reportData.term}
Year: ${reportData.year}

Subject Results:

${reportData.subjects.map(subject => 
  `${subject.name}: ${subject.mark}%\nComment: ${subject.comment}`
).join('\n\n')}

Overall Performance: ${reportData.overallPerformance}

This report reflects the student's academic performance for the specified period.
  `.trim();

  return InstitutionBrandedPDF({
    title,
    content,
    institution: reportData.institution,
    fileName: `report_${reportData.studentName.toLowerCase().replace(/\s+/g, '_')}_${reportData.term.toLowerCase()}_${reportData.year}.pdf`
  });
}
